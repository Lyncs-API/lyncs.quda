diff --git a/include/gauge_force_quda.h b/include/gauge_force_quda.h
index d9b76d1..970b63b 100644
--- a/include/gauge_force_quda.h
+++ b/include/gauge_force_quda.h
@@ -6,7 +6,7 @@ namespace quda {
   /**
      @brief Compute the gauge-force contribution to the momentum
      @param[out] mom Momentum field
-     @param[in] u Gauge field (extended when running no multiple GPUs)
+     @param[in] u Gauge field (extended when running on multiple GPUs)
      @param[in] coeff Step-size coefficient
      @param[in] input_path Host-array holding all path contributions for the gauge action
      @param[in] length Host array holding the length of all paths
@@ -16,6 +16,20 @@ namespace quda {
    */
   void gaugeForce(GaugeField& mom, const GaugeField& u, double coeff, int ***input_path,
 		  int *length, double *path_coeff, int num_paths, int max_length);
+
+  /**
+     @brief Compute the product of gauge links along the given path
+     @param[out] out Gauge field
+     @param[in] u Gauge field (extended when running on multiple GPUs)
+     @param[in] coeff Step-size coefficient
+     @param[in] input_path Host-array holding all path contributions for the gauge action
+     @param[in] length Host array holding the length of all paths
+     @param[in] path_coeff Coefficient of each path
+     @param[in] num_paths Numer of paths
+     @param[in] max_length Maximum length of each path
+   */
+  void gaugePath(GaugeField& out, const GaugeField& u, double coeff, int ***input_path,
+		 int *length, double *path_coeff, int num_paths, int max_length);
 } // namespace quda
 
 
diff --git a/lib/gauge_force.cu b/lib/gauge_force.cu
index ad70533..0cc1dca 100644
--- a/lib/gauge_force.cu
+++ b/lib/gauge_force.cu
@@ -14,7 +14,7 @@ namespace quda {
     const double *path_coeff;
     int count;
 
-    paths(void *buffer, size_t bytes, int ***input_path, int *length_h, double *path_coeff_h, int num_paths, int max_length) :
+    paths(void *buffer, size_t bytes, int pad, int ***input_path, int *length_h, double *path_coeff_h, int num_paths, int max_length) :
       num_paths(num_paths),
       max_length(max_length),
       count(0)
@@ -37,7 +37,7 @@ namespace quda {
       memcpy((char*)path_h + 4 * num_paths * max_length * sizeof(int), length_h, num_paths*sizeof(int));
 
       // path_coeff array
-      memcpy((char*)path_h + 4 * num_paths * max_length * sizeof(int) + num_paths*sizeof(int), path_coeff_h, num_paths*sizeof(double));
+      memcpy((char*)path_h + 4 * num_paths * max_length * sizeof(int) + num_paths*sizeof(int) + pad, path_coeff_h, num_paths*sizeof(double));
 
       qudaMemcpy(buffer, path_h, bytes, cudaMemcpyHostToDevice);
       host_free(path_h);
@@ -45,12 +45,12 @@ namespace quda {
       // finally set the pointers to the correct offsets in the buffer
       for (int d=0; d < 4; d++) this->input_path[d] = (int*)((char*)buffer + d*num_paths*max_length*sizeof(int));
       length = (int*)((char*)buffer + 4*num_paths*max_length*sizeof(int));
-      path_coeff = (double*)((char*)buffer + 4 * num_paths * max_length * sizeof(int) + num_paths*sizeof(int));
+      path_coeff = (double*)((char*)buffer + 4 * num_paths * max_length * sizeof(int) + num_paths*sizeof(int) + pad);
     }
   };
 
   template <typename Float_, int nColor_, QudaReconstructType recon_u, QudaReconstructType recon_m>
-  struct GaugeForceArg {
+  struct GaugePathArg {
     using Float = Float_;
     static constexpr int nColor = nColor_;
     static_assert(nColor == 3, "Only nColor=3 enabled at this time");
@@ -68,7 +68,7 @@ namespace quda {
     Float epsilon; // stepsize and any other overall scaling factor
     const paths p;
 
-    GaugeForceArg(GaugeField &mom, const GaugeField &u, double epsilon, const paths &p)
+    GaugePathArg(GaugeField &mom, const GaugeField &u, double epsilon, const paths &p)
       : mom(mom), u(u),
         threads(mom.VolumeCB()),
 	epsilon(epsilon),
@@ -94,8 +94,8 @@ namespace quda {
 #endif
   }
 
-  template <typename Arg, int dir>
-  __device__ __host__ inline void GaugeForceKernel(Arg &arg, int idx, int parity)
+  template <typename Arg, int dir, bool force>
+  __device__ __host__ inline void GaugePathKernel(Arg &arg, int idx, int parity)
   {
     using real = typename Arg::Float;
     typedef Matrix<complex<real>,Arg::nColor> Link;
@@ -168,13 +168,17 @@ namespace quda {
 
     // update mom(x)
     Link mom = arg.mom(dir, idx, parity);
-    mom = mom - arg.epsilon * linkA;
-    makeAntiHerm(mom);
+    if(force) {
+      mom = mom - arg.epsilon * linkA;
+      makeAntiHerm(mom);
+    } else {
+      mom = mom + arg.epsilon * linkA;
+    }
     arg.mom(dir, idx, parity) = mom;
   }
 
-  template <typename Arg>
-  __global__ void GaugeForceKernel(Arg arg) {
+  template <typename Arg, bool force>
+  __global__ void GaugePathKernel(Arg arg) {
     int idx = blockIdx.x * blockDim.x + threadIdx.x;
     if (idx >= arg.threads) return;
     int parity = blockIdx.y * blockDim.y + threadIdx.y;
@@ -182,16 +186,16 @@ namespace quda {
     if (dir >= 4) return;
 
     switch(dir) {
-    case 0: GaugeForceKernel<Arg,0>(arg, idx, parity); break;
-    case 1: GaugeForceKernel<Arg,1>(arg, idx, parity); break;
-    case 2: GaugeForceKernel<Arg,2>(arg, idx, parity); break;
-    case 3: GaugeForceKernel<Arg,3>(arg, idx, parity); break;
+    case 0: GaugePathKernel<Arg,0,force>(arg, idx, parity); break;
+    case 1: GaugePathKernel<Arg,1,force>(arg, idx, parity); break;
+    case 2: GaugePathKernel<Arg,2,force>(arg, idx, parity); break;
+    case 3: GaugePathKernel<Arg,3,force>(arg, idx, parity); break;
     }
   }
 
-  template <typename Float, int nColor, QudaReconstructType recon_u> class GaugeForce : public TunableVectorYZ {
+  template <typename Float, int nColor, QudaReconstructType recon_u, bool force=false> class GaugePath : public TunableVectorYZ {
 
-    GaugeForceArg<Float, nColor, recon_u, QUDA_RECONSTRUCT_10> arg;
+    GaugePathArg<Float, nColor, recon_u, force ? QUDA_RECONSTRUCT_10 : recon_u> arg;
     const GaugeField &meta;
 
     unsigned int sharedBytesPerThread() const { return 4; } // for dynamic indexing array
@@ -199,7 +203,7 @@ namespace quda {
     bool tuneGridDim() const { return false; } // don't tune the grid dimension
 
   public:
-    GaugeForce(const GaugeField &u, GaugeField &mom, double epsilon, const paths &p) :
+    GaugePath(const GaugeField &u, GaugeField &mom, double epsilon, const paths &p) :
       TunableVectorYZ(2,4),
       arg(mom, u, epsilon, p),
       meta(u)
@@ -210,7 +214,7 @@ namespace quda {
 
     void apply(const qudaStream_t &stream) {
       TuneParam tp = tuneLaunch(*this, getTuning(), getVerbosity());
-      qudaLaunchKernel(GaugeForceKernel<decltype(arg)>, tp, stream, arg);
+      qudaLaunchKernel(GaugePathKernel<decltype(arg), force>, tp, stream, arg);
     }
 
     void preTune() { arg.mom.save(); }
@@ -226,6 +230,10 @@ namespace quda {
     }
   };
 
+  template<typename Float, int nColor, QudaReconstructType recon_u> using GaugeForce = GaugePath<Float,nColor,recon_u,true>;
+  // need to redefine GaugePath because otherwise cannot instantiate (even if default value of force is false)
+  template<typename Float, int nColor, QudaReconstructType recon_u> using GaugePath2 = GaugePath<Float,nColor,recon_u,false>;
+
   void gaugeForce(GaugeField& mom, const GaugeField& u, double epsilon, int ***input_path,
                   int *length_h, double *path_coeff_h, int num_paths, int path_max_length)
   {
@@ -234,9 +242,11 @@ namespace quda {
     if (mom.Reconstruct() != QUDA_RECONSTRUCT_10) errorQuda("Reconstruction type %d not supported", mom.Reconstruct());
 
     // create path struct in a single allocation
-    size_t bytes = 4 * num_paths * path_max_length * sizeof(int) + num_paths*sizeof(int) + num_paths*sizeof(double);
+    size_t bytes = 4 * num_paths * path_max_length * sizeof(int) + num_paths*sizeof(int);
+    int pad = (sizeof(double) - bytes % sizeof(double)) % sizeof(double);
+    bytes += pad + num_paths*sizeof(double);
     void *buffer = pool_device_malloc(bytes);
-    paths p(buffer, bytes, input_path, length_h, path_coeff_h, num_paths, path_max_length);
+    paths p(buffer, bytes, pad, input_path, length_h, path_coeff_h, num_paths, path_max_length);
 
 #ifdef GPU_GAUGE_FORCE
     // gauge field must be passed as first argument so we peel off its reconstruct type
@@ -247,4 +257,27 @@ namespace quda {
     pool_device_free(buffer);
   }
 
+  void gaugePath(GaugeField& out, const GaugeField& u, double epsilon, int ***input_path,
+                  int *length_h, double *path_coeff_h, int num_paths, int path_max_length)
+  {
+    checkPrecision(out, u);
+    checkLocation(out, u);
+    checkReconstruct(out, u);
+
+    // create path struct in a single allocation
+    size_t bytes = 4 * num_paths * path_max_length * sizeof(int) + num_paths*sizeof(int);
+    int pad = (sizeof(double) - bytes % sizeof(double)) % sizeof(double);
+    bytes += pad + num_paths*sizeof(double);
+    void *buffer = pool_device_malloc(bytes);
+    paths p(buffer, bytes, pad, input_path, length_h, path_coeff_h, num_paths, path_max_length);
+
+#ifdef GPU_GAUGE_FORCE
+    // gauge field must be passed as first argument so we peel off its reconstruct type
+    instantiate<GaugePath2>(u, out, epsilon, p);
+#else
+    errorQuda("Gauge force has not been built");
+#endif // GPU_GAUGE_FORCE
+    pool_device_free(buffer);
+  }
+
 } // namespace quda
