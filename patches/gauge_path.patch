diff --git a/lib/gauge_force.cu b/lib/gauge_force.cu
index 95bd8ab47..69a5e2e37 100644
--- a/lib/gauge_force.cu
+++ b/lib/gauge_force.cu
@@ -59,6 +59,7 @@ namespace quda {
 
     Mom mom;
     const Gauge u;
+    bool is_mom;
 
     int threads;
     int X[4]; // the regular volume parameters
@@ -69,7 +70,7 @@ namespace quda {
     const paths p;
 
     GaugeForceArg(GaugeField &mom, const GaugeField &u, double epsilon, const paths &p)
-      : mom(mom), u(u),
+      : mom(mom), u(u), is_mom(recon_m==QUDA_RECONSTRUCT_10),
         threads(mom.VolumeCB()),
 	epsilon(epsilon),
         p(p)
@@ -168,8 +169,12 @@ namespace quda {
 
     // update mom(x)
     Link mom = arg.mom(dir, idx, parity);
-    mom = mom - arg.epsilon * linkA;
-    makeAntiHerm(mom);
+    if(arg.is_mom) {
+      mom = mom - arg.epsilon * linkA;
+      makeAntiHerm(mom);
+    } else {
+      mom = mom + arg.epsilon * linkA;
+    }
     arg.mom(dir, idx, parity) = mom;
   }
 
@@ -189,9 +194,9 @@ namespace quda {
     }
   }
 
-  template <typename Float, int nColor, QudaReconstructType recon_u> class GaugeForce : public TunableVectorYZ {
+  template <typename Float, int nColor, QudaReconstructType recon_mom> class GaugeForce : public TunableVectorYZ {
 
-    GaugeForceArg<Float, nColor, recon_u, QUDA_RECONSTRUCT_10> arg;
+    GaugeForceArg<Float, nColor, QUDA_RECONSTRUCT_12, recon_mom> arg;
     const GaugeField &meta;
 
     unsigned int sharedBytesPerThread() const { return 4; } // for dynamic indexing array
@@ -232,7 +237,8 @@ namespace quda {
   {
     checkPrecision(mom, u);
     checkLocation(mom, u);
-    if (mom.Reconstruct() != QUDA_RECONSTRUCT_10) errorQuda("Reconstruction type %d not supported", mom.Reconstruct());
+    if (mom.Reconstruct() != QUDA_RECONSTRUCT_10 and mom.Reconstruct() != QUDA_RECONSTRUCT_NO)
+      errorQuda("Reconstruction type %d not supported", mom.Reconstruct());
 
     // create path struct in a single allocation
     size_t bytes = 4 * num_paths * path_max_length * sizeof(int) + num_paths*sizeof(int) + num_paths*sizeof(double);
@@ -241,7 +247,10 @@ namespace quda {
 
 #ifdef GPU_GAUGE_FORCE
     // gauge field must be passed as first argument so we peel off its reconstruct type
-    instantiate<GaugeForce,ReconstructNo12>(u, mom, epsilon, p);
+    if (mom.Reconstruct() == QUDA_RECONSTRUCT_10)
+      instantiate<GaugeForce,ReconstructMom>(u, mom, epsilon, p);
+    else if (mom.Reconstruct() == QUDA_RECONSTRUCT_NO)
+      instantiate<GaugeForce,ReconstructNone>(u, mom, epsilon, p);
 #else
     errorQuda("Gauge force has not been built");
 #endif // GPU_GAUGE_FORCE
