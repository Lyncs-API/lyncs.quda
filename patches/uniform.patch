diff --git a/include/gauge_tools.h b/include/gauge_tools.h
index 4674d5b..2c9af15 100644
--- a/include/gauge_tools.h
+++ b/include/gauge_tools.h
@@ -69,6 +69,24 @@ namespace quda
   void gaugeGauss(GaugeField &U, unsigned long long seed, double epsilon);
 
   /**
+     @brief Generate uniformly distributed SU(N) fields.
+
+     @param[out] U The output gauge field
+     @param[in] rngstate random states
+  */
+
+  void gaugeUniform(GaugeField &U, RNG &rngstate);
+
+  /**
+     @brief Generate Gaussian distributed or SU(N) fields.
+
+     @param[out] U The GaugeField
+     @param[in] seed The seed used for the RNG
+  */
+
+  void gaugeUniform(GaugeField &U, unsigned long long seed);
+
+  /**
      @brief Apply APE smearing to the gauge field
 
      @param[out] dataDs Output smeared field
diff --git a/include/kernels/gauge_random.cuh b/include/kernels/gauge_random.cuh
index 07bee3a..a8b5efc 100644
--- a/include/kernels/gauge_random.cuh
+++ b/include/kernels/gauge_random.cuh
@@ -37,20 +37,26 @@ namespace quda {
     }
   };
 
+  template <typename real> __device__ __host__ inline void gauss(RNGState &localState, real* arr1, real* arr2, int n)
+  {
+    for (int i = 0; i < n; ++i) {
+      real rand1 = uniform<real>::rand(localState);
+      real rand2 = uniform<real>::rand(localState);
+      
+      real phi = 2.0 * rand1;
+      real radius = sqrt(-log(rand2));
+      quda::sincospi(phi, &arr2[i], &arr1[i]);
+      arr1[i] *= radius;
+      arr2[i] *= radius;
+    }
+  }
+  
   template <typename real, typename Link> __device__ __host__ Link gauss_su3(RNGState &localState)
   {
     Link ret;
-    real rand1[4], rand2[4], phi[4], radius[4], temp1[4], temp2[4];
-
-    for (int i = 0; i < 4; ++i) {
-      rand1[i] = uniform<real>::rand(localState);
-      rand2[i] = uniform<real>::rand(localState);
-      phi[i] = 2.0 * rand1[i];
-      radius[i] = sqrt(-log(rand2[i]));
-      quda::sincospi(phi[i], &temp2[i], &temp1[i]);
-      temp1[i] *= radius[i];
-      temp2[i] *= radius[i];
-    }
+    real temp1[4], temp2[4];
+
+    gauss(localState, temp1, temp2, 4);
 
     // construct Anti-Hermitian matrix
     const real rsqrt_3 = quda::rsqrt(3.0);
@@ -109,4 +115,122 @@ namespace quda {
     }
   };
 
+  template <typename Float_, int nColor_, QudaReconstructType recon_, bool group_>
+  struct GaugeUniformArg : kernel_param<> {
+    using Float = Float_;
+    using real = typename mapper<Float>::type;
+    static constexpr int nColor = nColor_;
+    static constexpr QudaReconstructType recon = recon_;
+    static constexpr bool group = group_;
+
+    using Gauge = typename gauge_mapper<Float, recon>::type;
+
+    int E[4]; // extended grid dimensions
+    int X[4]; // true grid dimensions
+    int border[4];
+    Gauge U;
+    RNGState *rng;
+
+    GaugeUniformArg(const GaugeField &U, RNGState *rng) :
+      kernel_param(dim3(U.LocalVolumeCB(), 2, 1)),
+      U(U),
+      rng(rng)
+    {
+      for (int dir = 0; dir < 4; ++dir) {
+        border[dir] = U.R()[dir];
+        E[dir] = U.X()[dir];
+        X[dir] = U.X()[dir] - border[dir] * 2;
+      }
+    }
+  };
+
+
+  template <typename real, typename Link> __device__ __host__ inline void uniform_SU3_row(RNGState &localState, Link &ret, int row)
+  {
+    // This code is based on Martin Luescher implementation in openQCD.
+    // This function is the equivalent of "random_su3_vector" in openQCD/modules/su3fcts/random_su3.c
+    real temp1[3], temp2[3];
+    real fact = 0;
+
+    while (fact<=0.1) {
+      gauss(localState, temp1, temp2, 3);
+      fact = 0;
+      for (int i = 0; i < 3; ++i) {
+	fact += temp1[i]*temp1[i] + temp2[i]*temp2[i];
+      }
+    }
+    
+    fact = 1/sqrt(fact);
+    for (int i = 0; i < 3; ++i) {
+      ret(row, i) = complex<real>(fact*temp1[i], fact*temp2[i]);
+    }
+  }
+
+  template <typename Link> __device__ __host__ inline void rows_cross_prod(Link &ret, int out, int in1, int in2)
+  {
+    /*
+     * Cross product between rows #in1 and #in2, stored in row #out
+     * o,0 = (i1,1 * i2,2 - i1,2 * i2,1)^*
+     * o,1 = (i1,2 * i2,0 - i1,0 * i2,2)^*
+     * o,2 = (i1,0 * i2,1 - i1,1 * i2,0)^*
+     */
+    ret(out,0) = conj(ret(in1,1)*ret(in2,2) - ret(in1,2)*ret(in2,1));
+    ret(out,1) = conj(ret(in1,2)*ret(in2,0) - ret(in1,0)*ret(in2,2));
+    ret(out,2) = conj(ret(in1,0)*ret(in2,1) - ret(in1,1)*ret(in2,0));
+  }
+  
+  template <typename real, typename Link> __device__ __host__ Link uniform_SU3(RNGState &localState)
+  {
+    // This code is based on Martin Luescher implementation in openQCD.
+    // This function is the equivalent of "random_su3" in openQCD/modules/su3fcts/random_su3.c
+    Link ret;
+    real fact = 0;
+
+    uniform_SU3_row<real,Link>(localState, ret, 0);
+
+    while (fact<=0.1) {
+      fact = 0;
+      uniform_SU3_row<real,Link>(localState, ret, 1);
+      rows_cross_prod(ret, 2, 0, 1);
+      for (int i = 0; i < 3; ++i) {
+	fact += norm(ret(2, i));
+      }
+    }
+
+    fact = 1/sqrt(fact);
+
+    for (int i = 0; i < 3; ++i) {
+      ret(2, i) *= fact;
+    }
+
+    rows_cross_prod(ret, 1, 2, 0);
+    
+    return ret;
+  }
+
+  
+  template <typename Arg> struct UniformGauge
+  {
+    const Arg &arg;
+    constexpr UniformGauge(const Arg &arg) : arg(arg) {}
+    static constexpr const char* filename() { return KERNEL_FILE; }
+
+    __device__ __host__ void operator()(int x_cb, int parity)
+    {
+      using real = typename mapper<typename Arg::Float>::type;
+      using Link = Matrix<complex<real>, Arg::nColor>;
+
+      int x[4];
+      getCoords(x, x_cb, arg.X, parity);
+      for (int dr = 0; dr < 4; ++dr) x[dr] += arg.border[dr]; // extended grid coordinates
+
+      for (int mu = 0; mu < 4; mu++) {
+	RNGState localState = arg.rng[parity * arg.threads.x + x_cb];
+	
+	// generate Uniform distributed SU(N) fiueld
+	arg.U(mu, linkIndex(x, arg.E), parity) = uniform_SU3<real, Link>(localState);
+	arg.rng[parity * arg.threads.x + x_cb] = localState;
+      }
+    }
+  };
 }
diff --git a/lib/gauge_random.cu b/lib/gauge_random.cu
index 5d7ceca..8a4fc38 100644
--- a/lib/gauge_random.cu
+++ b/lib/gauge_random.cu
@@ -24,7 +24,7 @@ namespace quda {
       sigma(static_cast<Float>(sigma)),
       group(U.LinkType() == QUDA_SU3_LINKS)
     {
-      if (getVerbosity() >= QUDA_SUMMARIZE) {
+      if (getVerbosity() >= QUDA_VERBOSE) {
         if (group) printfQuda("Creating Gaussian distrbuted Lie group field with sigma = %e\n", sigma);
         else printfQuda("Creating Gaussian distrbuted Lie algebra field\n");
       }
@@ -70,4 +70,58 @@ namespace quda {
     RNG randstates(U, seed);
     gaugeGauss(U, randstates, sigma);
   }
+
+  template <typename Float, int nColor, QudaReconstructType recon>
+  class GaugeUniform : TunableKernel2D
+  {
+    GaugeField &U;
+    RNG &rng;
+    unsigned int minThreads() const { return U.VolumeCB(); }
+
+  public:
+    GaugeUniform(GaugeField &U, RNG &rng) :
+      TunableKernel2D(U, 2),
+      U(U),
+      rng(rng)
+    {
+      if (getVerbosity() >= QUDA_VERBOSE) {
+        printfQuda("Creating uniformian distrbuted Lie group field\n");
+      }
+      apply(device::get_default_stream());
+    }
+
+    void apply(const qudaStream_t &stream)
+    {
+      TuneParam tp = tuneLaunch(*this, getTuning(), getVerbosity());
+      launch<UniformGauge>(tp, stream, GaugeUniformArg<Float, nColor, recon, true>(U, rng.State()));
+    }
+
+    long long flops() const { return 0; }
+    long long bytes() const { return U.Bytes(); }
+
+    void preTune() { rng.backup(); }
+    void postTune() { rng.restore(); }
+  };
+
+  void gaugeUniform(GaugeField &U, RNG &rng)
+  {
+    if (!U.isNative()) errorQuda("Order %d with %d reconstruct not supported", U.Order(), U.Reconstruct());
+    if (U.LinkType() != QUDA_SU3_LINKS)
+      errorQuda("Unexpected link type %d", U.LinkType());
+
+    instantiate<GaugeUniform, ReconstructFull>(U, rng);
+
+    // ensure multi-gpu consistency if required
+    if (U.GhostExchange() == QUDA_GHOST_EXCHANGE_EXTENDED) {
+      U.exchangeExtendedGhost(U.R());
+    } else if (U.GhostExchange() == QUDA_GHOST_EXCHANGE_PAD) {
+      U.exchangeGhost();
+    }
+  }
+
+  void gaugeUniform(GaugeField &U, unsigned long long seed)
+  {
+    RNG randstates(U, seed);
+    gaugeUniform(U, randstates);
+  }
 }
