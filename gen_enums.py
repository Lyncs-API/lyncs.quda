"Reads enum_quda.h and returns the content of enums.py"

import re
from os.path import commonprefix

# Requires the package to be installed
from lyncs_quda.lib import PATHS, lib

output = """
"List of QUDA enumerations"

# NOTE: This file is automathically generated by gen_enums.py
# DO NOT CHANGE MANUALLY but exeute
# python gen_enums.py

from .enum import Enum
"""

enum_class = """

class {name}(Enum):
    \"""
    {docs}
    \"""

    _prefix = "{prefix}"
    _suffix = "{suffix}"
    _values = {values}
"""

replace = {
    "{": " { ",
    "}": " } ",
    ",": " , ",
    "=": " = ",
    ";": " ; ",
}
pattern = re.compile("|".join((re.escape(k) for k in replace.keys())), flags=re.DOTALL)


def commonsuffix(words):
    reverse = lambda word: word[::-1]
    words = list(map(reverse, words))
    return commonprefix(words)[::-1]


def parse_enum(lines):
    global output

    assert lines[0].startswith("typedef enum")

    # getting comments:
    comments = {}
    for i, line in enumerate(lines):
        if "//" in line:
            line, comment = line.split("//")
            line = line.strip()
            comment = comment.strip()
            lines[i] = line
            key = pattern.sub(lambda x: replace[x.group(0)], line).split()[0]
            comments[key] = comment

    words = pattern.sub(lambda x: replace[x.group(0)], " ".join(lines)).split()
    assert words[-1] == ";"

    name = words[-2]
    enums = []
    for i in range(len(words)):
        if words[i] in ["{", ","]:
            enums.append(words[i + 1])

    prefix = commonprefix(enums).lower()
    suffix = commonsuffix(enums).lower()
    clean = (
        lambda word: word[len(prefix) : -len(suffix)] if suffix else word[len(prefix) :]
    )

    comments = {
        clean(key.lower()): "    # " + val
        for key, val in comments.items()
        if key in enums
    }

    # Generating values
    values = {clean(key.lower()): int(getattr(lib, key)) for key in enums}

    # Generating docs
    docs = [f"{key} = {val}{comments.get(key,'')}" for key, val in values.items()]
    docs = "\n    ".join(docs)

    return enum_class.format(
        name=name, prefix=prefix, suffix=suffix, values=values, docs=docs
    )


header = open(PATHS[0] + "/include/enum_quda.h")
lines = header.readlines()
header.close()

# packing groups of enums and then calling parse_enum
pack = []
for line in lines:
    line = line.strip()
    if line.startswith("typedef enum"):
        pack.append(line)
    elif pack:
        pack.append(line)
    if pack and line.endswith(";"):
        output += parse_enum(pack)
        pack = []

filename = PATHS[0] + "/enums.py"
with open(filename, "w") as fp:
    fp.write(output)

from black import format_file_in_place, Mode, Path, WriteBack

format_file_in_place(Path(filename), False, Mode(), write_back=WriteBack.YES)
